#!/usr/bin/env python3

import tempfile
import subprocess
import sys
from pathlib import Path

from ruamel.yaml import YAML


def main():
    """EYAML editor example."""

    # Use ruamel.yaml
    yaml = YAML(typ="rt")
    yaml.default_flow_style = False

    filename = Path(sys.argv[1])

    config = yaml.load(open(filename))

    # Mask any value that begins with ENC[...]
    temp_config = {}
    for key, value in config.items():
        if isinstance(value, str) and value.startswith("ENC["):
            temp_config[key] = "<unchanged>"
        else:
            temp_config[key] = value

    with tempfile.NamedTemporaryFile(suffix=".yaml") as tmpfile:
        # Write the config to a temporary file
        with open(tmpfile.name, "w") as f:
            yaml.dump(temp_config, f)

        # Edit the file with nvim
        subprocess.run(["nvim", tmpfile.name])

        # Read the file back in
        with open(tmpfile.name, "r") as f:
            temp_config = yaml.load(f)

    # Encrypt any values that have changed
    gpg_path = filename.parents[1] / "hiera-eyaml-gpg.recipients"
    for key, value in temp_config.items():
        # If the value is changed, encrypt and use the new value
        if value != "<unchanged>":
            config[key] = (
                subprocess.run(
                    [
                        "eyaml",
                        "encrypt",
                        "-n",
                        "gpg",
                        "-s",
                        value,
                        "--gpg-recipients-file",
                        gpg_path,
                        "--gpg-always-trust",
                    ],
                    capture_output=True,
                )
                .stdout.decode("utf-8")
                .split("\n")[0]
                .split(": ")[1]
            )

    # Write the new config to the original file
    with filename.open("w") as f:
        yaml.dump(config, f)


if __name__ == "__main__":
    main()
